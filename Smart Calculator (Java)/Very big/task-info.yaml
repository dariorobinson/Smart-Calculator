type: edu
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;
    import java.util.*;

    public class Calculator {
        private final Scanner scanner = new Scanner(System.in);

        private final Map<String, String> map = new HashMap<>();

        public void printFromMap(String str) {
                System.out.println(map.get(str));
        }

        public int Prec(String input)
        {
            return switch (input) {
                case "(", ")" -> 1;
                case "+", "-" -> 2;
                case "*", "/" -> 3;
                case "^" -> 4;
                default -> -1;
            };
        }

        public String reverseNotation(String[] exp) {

            StringBuilder result = new StringBuilder();
            Deque<String> stack = new ArrayDeque<>();

            for (String c : exp) {
                if (c.matches("[0-9]+")) {
                    result.append(c).append(" ");
                } else if (c.matches("[a-zA-Z]+")) {
                    if (map.containsKey(c)) {
                        result.append(map.get(c)).append(" ");
                    } else {
                        System.out.println("Invalid variable");
                    }
                } else if (c.equals("(")) {
                    stack.push(c);
                } else if (c.equals(")")) {
                    while (!stack.isEmpty()
                            && !stack.peek().equals("(")) {
                        result.append(stack.peek()).append(" ");
                        stack.pop();
                    }
                    stack.pop();
                } else {
                    while (!stack.isEmpty()
                            && Prec(c) <= Prec(stack.peek())) {

                        result.append(stack.peek()).append(" ");
                        stack.pop();
                    }
                    stack.push(c);
                }
            }

            while (!stack.isEmpty()) {
                if (stack.peek().equals("("))
                    return "Invalid Expression";
                result.append(stack.peek()).append(" ");
                stack.pop();
            }
            return result.toString();
        }

        public void calculate(String[] tokens) {
            Stack<String> stack = new Stack<>();
            int x;
            int y;
            String result;
            String choice;
            int value = 0;
            String p = "";
            for (int i = 0; i < tokens.length; i++) {
                if (!tokens[i].matches("[\\*\\+/-]")) {
                    stack.push(tokens[i]);
                    continue;
                }
                else {
                    choice = tokens[i];
                }
                switch (choice) {
                    case "+":
                        x = Integer.parseInt(stack.pop());
                        y = Integer.parseInt(stack.pop());
                        value = x + y;
                        result = p + value;
                        stack.push(result);
                        break;
                    case "-":
                        x = Integer.parseInt(stack.pop());
                        y = Integer.parseInt(stack.pop());
                        value = y - x;
                        result = p + value;
                        stack.push(result);
                        break;
                    case "*":
                        x = Integer.parseInt(stack.pop());
                        y = Integer.parseInt(stack.pop());
                        value = x * y;
                        result = p + value;
                        stack.push(result);
                        break;
                    case "/":
                        x = Integer.parseInt(stack.pop());
                        y = Integer.parseInt(stack.pop());
                        value = y / x;
                        result = p + value;
                        stack.push(result);
                        break;
                    case "^":
                        x = Integer.parseInt(stack.pop());
                        y = Integer.parseInt(stack.pop());
                        value = (int) Math.pow(x,y);
                        result = p + value;
                        stack.push(result);
                        break;
                    default:
                }
            }

            try {
                System.out.println(Integer.valueOf(stack.pop()));
            } catch(Exception e) {
                System.out.println("Invalid expression");
            }

        }

        public void addToMap(String str, Map<String, String> map) {

            str = str.replaceAll("=", " ");
            str = str.replaceAll("\\s+", " ");

            String[] arr = str.split(" ");
            if(arr.length == 2) {
                if (!arr[0].matches("[a-zA-Z]+")) {
                    System.out.println("Invalid identifier");
                } else if (arr[0].matches("[a-zA-Z]+") && arr[1].matches("-?[0-9]+")){
                    map.put(arr[0], arr[1]);
                } else if (!arr[1].matches("[a-zA-Z]+") || !map.containsKey(arr[1])) {
                    System.out.println("Invalid assignment");
                } else if (arr[1].matches("[a-zA-Z]+") && map.containsKey(arr[1])) {
                    map.put(arr[0], map.get(arr[1]));
                }
            } else {
                System.out.println("Invalid assignment");
            }

        }
        public void start() {

            while(true) {
                String numInput = scanner.nextLine();

                if (numInput.equals("")) {
                    continue;
                } else if (numInput.equals("/exit")) {
                    System.out.println("Bye!");
                    break;
                } else if (numInput.equals("/help")) {
                    System.out.println("The program calculates the sum of numbers");
                    continue;
                } else if(numInput.substring(0,1).equals("/") && numInput.substring(1).matches("[a-zA-Z]+")) {
                    System.out.println("Unknown command");
                    continue;
                }

                numInput = numInput.replaceAll("=", " = ");
                numInput = numInput.replaceAll("\\(", "( ");
                numInput = numInput.replaceAll("\\)", " )");
                numInput = numInput.replaceAll("--", "+");
                numInput = numInput.replaceAll("\\++", " + ");
                numInput = numInput.replaceAll("\\+ -+", "- ");
                numInput = numInput.replaceAll("\\*", " * ");
                numInput = numInput.replaceAll("/", " / ");
                numInput = numInput.replaceAll("\\s+", " ");
                numInput = numInput.trim();
                String[] nums = numInput.split(" ");

                boolean valid = isValidExpression(numInput);


                for(int i = 0; i < nums.length; i++) {
                    if (nums[i].matches("[+]+\\d+")) {
                        nums[i] = nums[i].substring(1);
                    }
                }

                if(nums.length <= 1) {
                    if(map.containsKey(numInput)) {
                        printFromMap(numInput);
                    } else {
                        System.out.println("Unknown variable");
                    }
                    continue;
                }

                if(nums.length > 1 && nums[1].equals("=")) {
                    addToMap(numInput, map);
                    continue;
                }
                if(valid) {

                     if (nums.length == 1) {
                        System.out.println(nums[0]);
                    } else {
                         String polishNotation = reverseNotation(nums);
                         calculate(polishNotation.split(" "));
                    }
                } else {
                    System.out.println("Invalid expression");
                }

            }
        }

        public boolean isValidExpression(String str) {
            String line = str.replaceAll(" {2,}", " ");
            line = line.replaceAll("--", "+");

            String[] arr = line.split(" ");

            int countOne = 0;
            int countTwo = 0;

            int multiplicationCount = 0;
            int divisionCount = 0;
            for(String element: arr) {
                if (multiplicationCount > 1) {
                    return false;
                }
                if(divisionCount > 1) {
                    return false;
                }

                if(element.equals("(")) {
                    countOne++;
                } else if(element.equals(")")) {
                    countTwo++;
                } else if(element.matches("\\*{2,}")) {
                    return false;
                } else if (element.matches("/{2,}")) {
                    return false;
                } else if (element.equals("*")) {
                    multiplicationCount++;
                } else if(element.equals("/")) {
                    divisionCount++;
                }

                if(!element.equals("*")) {
                    multiplicationCount = 0;
                } else if(!element.equals("/")) {
                    divisionCount = 0;
                }
            }

            if(countOne != countTwo) {
                return false;
            }
            return true;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5323#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 11 Jul 2023 17:53:56 UTC"
record: -1
